<!DOCTYPE html>
<html lang="ja">
<head>
<title>Object-Oriented Game</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">

<!-- PWA Manifest -->
<link rel="manifest" href="manifest.json">
<meta name="theme-color" content="#0095DD">
<meta name="mobile-web-app-capable" content="yes">
<meta name="mobile-web-app-status-bar-style" content="black-translucent">
<meta name="mobile-web-app-title" content="Breakout OOP">

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js">
</script>
<![endif]-->

<style>
body {font-family: Verdana, sans-serif; font-size:0.8em;}
header, nav, section, article, footer
{border:1px solid grey; margin:5px; padding:8px;}
nav ul {margin:0; padding:0;}
nav ul li {display:inline; margin:5px;}

canvas { background: #eee; display: block; margin: 0 auto; }

/* Mobile controls styling */
.mobile-controls {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-top: 10px;
}

.control-button {
  width: 60px;
  height: 60px;
  font-size: 24px;
  border: 2px solid #0095DD;
  background-color: #f0f0f0;
  border-radius: 10px;
  cursor: pointer;
  user-select: none;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s;
}

.control-button:active {
  background-color: #0095DD;
  color: white;
  transform: scale(0.95);
}

.control-button:hover {
  background-color: #e0e0e0;
}

/* Make canvas touch-friendly */
#MyCanvas {
  touch-action: pan-x;
}

/* Mobile responsive */
@media (max-width: 600px) {
  .control-button {
    width: 80px;
    height: 80px;
    font-size: 32px;
  }
  
  canvas {
    max-width: 100%;
    height: auto;
  }
}
</style>

<style>
  * {
    padding: 0;
    margin: 0;
  }
  canvas {
    background: rgb(200, 200, 200);
    display: block;
    margin: 0 auto;
  }

  /* Mute button styles */
  .mute-button {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    font-size: 24px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  }

  .mute-button:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.1);
  }

  .mute-button.muted {
    background: rgba(220, 53, 69, 0.8);
  }

  .mute-button.muted:hover {
    background: rgba(220, 53, 69, 1);
  }
</style>

</head>

<body>

<header>
<h1>„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÊåáÂêë„Ç≤„Éº„É†</h1>
</header>

<nav>
<ul>
  <li><a href="aboutme.htm">About me</a></li>
  <li><a href="hobbies.htm">Hobbies</a></li>
  <li><a href="job.htm">Job</a></li>
  <li><a href="game.htm">Original Game</a></li>
  <li><a href="gameObject.htm">OOP Game</a></li>
  <li><a href="settings.htm">Settings</a></li>
</ul>
</nav>

<section>
  <!-- 
  create the canvas object
  „Ç≠„É£„É≥„Éê„Çπ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÁîüÊàê
  -->
  <canvas id="MyCanvas" width="480" height="320"></canvas>
  
  <!-- Add the video element for the background (optional) -->
  <!-- <video id="background-video" src="assets/backgroundVideo.mp4" loop muted playsinline style="display: none;"></video> -->

  <!-- Add a button to start the game
       „Ç≤„Éº„É†„ÇíÈñãÂßã„Åô„Çã„Éú„Çø„É≥„ÇíËøΩÂä†„Åô„Çã -->
  <button id="runButton">Start Game</button>

  <!-- Mobile control buttons -->
  <div class="mobile-controls">
    <button class="control-button" id="leftButton">‚óÄ</button>
    <button class="control-button" id="rightButton">‚ñ∂</button>
  </div>

  <!-- Add the audio element for the BGM -->
  <audio id="bgm" src="assets/bgm.mp3" loop></audio>

  <!-- Mute button -->
  <button id="muteButton" class="mute-button" onclick="toggleMute()">üîä</button>

  <!-- Load all the class files -->
  <script src="player.js"></script>
  <script src="Ball.js"></script>
  <script src="Paddle.js"></script>
  <script src="Brick.js"></script>
  <script src="Sakura.js"></script>
  <script src="Game.js"></script>
  
  <script>
    // =================================================================
    // OBJECT-ORIENTED GAME INITIALIZATION
    // „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÊåáÂêë„Ç≤„Éº„É†„ÅÆÂàùÊúüÂåñ
    // =================================================================

    // DOMË¶ÅÁ¥†„ÇíÂèñÂæó
    const canvas = document.getElementById("MyCanvas");
    const video = document.getElementById("background-video") || null;
    
    // „Éì„Éá„Ç™„ÅÆË™≠„ÅøËæº„ÅøÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºà„Éì„Éá„Ç™„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÔºâ
    if (video) {
      video.addEventListener('loadeddata', function() {
        console.log('„Éì„Éá„Ç™„ÅåË™≠„ÅøËæº„Åæ„Çå„Åæ„Åó„Åü');
        console.log('„Éì„Éá„Ç™„ÅÆÈï∑„Åï:', video.duration, 'Áßí');
        console.log('„Éì„Éá„Ç™„ÅÆ„Çµ„Ç§„Ç∫:', video.videoWidth, 'x', video.videoHeight);
      });

      video.addEventListener('error', function(e) {
        console.error('„Éì„Éá„Ç™„Ç®„É©„Éº:', e);
        console.error('„Ç®„É©„Éº„ÅÆË©≥Á¥∞:', video.error);
        console.log('„Éì„Éá„Ç™„Éï„Ç°„Ç§„É´ backgroundVideo.mp4 „ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô');
        console.log('ÁèæÂú®„ÅÆ„Éö„Éº„Ç∏URL:', window.location.href);
        console.log('„Éì„Éá„Ç™„ÅÆsrc:', video.src);
      });

      // „Éì„Éá„Ç™„ÅåË™≠„ÅøËæº„Åæ„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
      video.addEventListener('canplay', function() {
        console.log('„Éì„Éá„Ç™ÂÜçÁîüÊ∫ñÂÇôÂÆå‰∫Ü');
      });

      // „Éì„Éá„Ç™ÂÜçÁîüÈñãÂßãÊôÇ„ÅÆ„Ç§„Éô„É≥„Éà
      video.addEventListener('play', function() {
        console.log('„Éì„Éá„Ç™ÂÜçÁîüÈñãÂßã„Ç§„Éô„É≥„ÉàÁô∫Áîü');
      });

      // „Éì„Éá„Ç™ÂÜçÁîü‰∏≠„ÅÆ„Ç§„Éô„É≥„Éà
      video.addEventListener('playing', function() {
        console.log('„Éì„Éá„Ç™ÂÜçÁîü‰∏≠');
      });

      // ÂàùÊúüÁä∂ÊÖã„Çí„É≠„Ç∞Âá∫Âäõ
      console.log('„Éì„Éá„Ç™Ë¶ÅÁ¥†:', video);
      console.log('„Éì„Éá„Ç™src:', video.src);
      console.log('„Éì„Éá„Ç™readyState:', video.readyState);
    } else {
      console.log('„Éì„Éá„Ç™Ë¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì - ËÉåÊôØ„Å™„Åó„Åß„Ç≤„Éº„É†„ÇíÂÆüË°å„Åó„Åæ„Åô');
    }

    // Touch gesture variables
    let touchStartX = 0;
    let touchStartY = 0;
    let isTouching = false;

    // Touch event handlers for swipe gestures
    canvas.addEventListener('touchstart', function(e) {
      e.preventDefault();
      const touch = e.touches[0];
      touchStartX = touch.clientX;
      touchStartY = touch.clientY;
      isTouching = true;
    }, { passive: false });

    canvas.addEventListener('touchmove', function(e) {
      e.preventDefault();
      if (!isTouching) return;

      const touch = e.touches[0];
      const deltaX = touch.clientX - touchStartX;
      const deltaY = touch.clientY - touchStartY;

      // Only process horizontal swipes (ignore vertical)
      if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 10) {
        if (deltaX > 0) {
          // Swipe right
          game.paddle.moveRight();
        } else {
          // Swipe left
          game.paddle.moveLeft();
        }
      }
    }, { passive: false });

    canvas.addEventListener('touchend', function(e) {
      e.preventDefault();
      isTouching = false;
    }, { passive: false });

    // Button controls for mobile
    const leftButton = document.getElementById('leftButton');
    const rightButton = document.getElementById('rightButton');

    // Left button events
    leftButton.addEventListener('touchstart', function(e) {
      e.preventDefault();
      game.setLeftPressed(true);
    }, { passive: false });

    leftButton.addEventListener('touchend', function(e) {
      e.preventDefault();
      game.setLeftPressed(false);
    }, { passive: false });

    leftButton.addEventListener('mousedown', function(e) {
      e.preventDefault();
      game.setLeftPressed(true);
    });

    leftButton.addEventListener('mouseup', function(e) {
      e.preventDefault();
      game.setLeftPressed(false);
    });

    // Right button events
    rightButton.addEventListener('touchstart', function(e) {
      e.preventDefault();
      game.setRightPressed(true);
    }, { passive: false });

    rightButton.addEventListener('touchend', function(e) {
      e.preventDefault();
      game.setRightPressed(false);
    }, { passive: false });

    rightButton.addEventListener('mousedown', function(e) {
      e.preventDefault();
      game.setRightPressed(true);
    });

    rightButton.addEventListener('mouseup', function(e) {
      e.preventDefault();
      game.setRightPressed(false);
    });

    // Prevent context menu on long press
    canvas.addEventListener('contextmenu', function(e) {
      e.preventDefault();
    });

    leftButton.addEventListener('contextmenu', function(e) {
      e.preventDefault();
    });

    rightButton.addEventListener('contextmenu', function(e) {
      e.preventDefault();
    });

    // „Ç≤„Éº„É†„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàê
    const game = new Game(canvas, video);

    // Mute functionality
    let isMuted = false;

    function toggleMute() {
      isMuted = !isMuted;
      const muteButton = document.getElementById('muteButton');
      const bgm = document.getElementById('bgm');
      
      if (isMuted) {
        // Mute all sounds
        bgm.muted = true;
        
        // Mute game sounds through the game instance
        if (game.bounceSound) game.bounceSound.sound.muted = true;
        if (game.blockSound) game.blockSound.sound.muted = true;
        if (game.gameOverSound) game.gameOverSound.sound.muted = true;
        if (game.winSound) game.winSound.sound.muted = true;
        
        muteButton.textContent = 'üîá';
        muteButton.classList.add('muted');
      } else {
        // Unmute all sounds
        bgm.muted = false;
        
        // Unmute game sounds through the game instance
        if (game.bounceSound) game.bounceSound.sound.muted = false;
        if (game.blockSound) game.blockSound.sound.muted = false;
        if (game.gameOverSound) game.gameOverSound.sound.muted = false;
        if (game.winSound) game.winSound.sound.muted = false;
        
        muteButton.textContent = 'üîä';
        muteButton.classList.remove('muted');
      }
    }

    // „Çπ„Çø„Éº„Éà„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    document.getElementById("runButton").addEventListener("click", function () {
      console.log('„Ç≤„Éº„É†ÈñãÂßã„Éú„Çø„É≥„Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„Åü');
      
      // „Éì„Éá„Ç™„ÅÆÂÜçÁîü„ÇíË©¶Ë°åÔºà„Éì„Éá„Ç™„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÔºâ
      if (video) {
        video.play().then(() => {
          console.log('„Éì„Éá„Ç™ÂÜçÁîüÈñãÂßã');
          game.startGame();
          this.disabled = true;
        }).catch((error) => {
          console.error('„Éì„Éá„Ç™ÂÜçÁîü„Ç®„É©„Éº:', error);
          // „Éì„Éá„Ç™„Å™„Åó„Åß„ÇÇ„Ç≤„Éº„É†„ÇíÈñãÂßã
          game.startGame();
          this.disabled = true;
        });
      } else {
        // „Éì„Éá„Ç™„Å™„Åó„Åß„Ç≤„Éº„É†„ÇíÈñãÂßã
        console.log('„Éì„Éá„Ç™„Å™„Åó„Åß„Ç≤„Éº„É†„ÇíÈñãÂßã');
        game.startGame();
        this.disabled = true;
      }
    });

    // Register service worker for PWA
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', function() {
        navigator.serviceWorker.register('./sw.js')
          .then(function(registration) {
            console.log('ServiceWorker registration successful');
          }, function(err) {
            console.log('ServiceWorker registration failed: ', err);
          });
      });
    }

  </script>
</section>

<footer>
<p>&copy; 2023 Object-Oriented Game. All rights reserved.</p>
</footer>

</body>
</html> 