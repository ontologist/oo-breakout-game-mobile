<!DOCTYPE html>
<html lang="ja">
<head>
<title>My Game</title>
<meta charset="utf-8">
<!-- Cache Buster: v2025-01-27-15:00 -->

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js">
</script>
<![endif]-->

<style>
body {font-family: Verdana, sans-serif; font-size:0.8em;}
header, nav, section, article, footer
{border:1px solid grey; margin:5px; padding:8px;}
nav ul {margin:0; padding:0;}
nav ul li {display:inline; margin:5px;}

canvas { background: #eee; display: block; margin: 0 auto; }

/* Canvas container for positioning mute button */
.canvas-container {
  position: relative;
  display: block;
  text-align: center;
  margin: 0 auto;
}

/* Start game button styles */
#runButton {
  font-size: 28px !important;
  padding: 18px 40px !important;
  background: #4CAF50 !important;
  color: white !important;
  border: none !important;
  border-radius: 10px !important;
  cursor: pointer !important;
  font-weight: bold !important;
  box-shadow: 0 6px 12px rgba(0,0,0,0.3) !important;
  transition: all 0.3s ease !important;
  text-transform: uppercase !important;
  letter-spacing: 1px !important;
}

#runButton:hover {
  background: #45a049 !important;
  transform: translateY(-2px) !important;
  box-shadow: 0 8px 16px rgba(0,0,0,0.4) !important;
}

#runButton:active {
  transform: translateY(0) !important;
  box-shadow: 0 4px 8px rgba(0,0,0,0.3) !important;
}

#runButton:disabled {
  background: #cccccc !important;
  cursor: not-allowed !important;
  transform: none !important;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2) !important;
}

</style>

<style>
  * {
    padding: 0;
    margin: 0;
  }
  canvas {
    background: rgb(200, 200, 200);
    display: block;
    margin: 0 auto;
  }

  /* Mute button styles */
  .mute-button {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 1000;
    background: rgba(0, 0, 0, 0.15);
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    font-size: 16px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    opacity: 0.4;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  }

  .mute-button:hover {
    background: rgba(0, 0, 0, 0.3);
    opacity: 0.8;
    transform: scale(1.1);
  }

  .mute-button.muted {
    background: rgba(220, 53, 69, 0.2);
    opacity: 0.5;
  }

  .mute-button.muted:hover {
    background: rgba(220, 53, 69, 0.4);
    opacity: 0.9;
  }
</style>

</head>

<body>

<header>
<h1>関学太郎</h1>
</header>

<nav>
<ul>
  <li><a href="aboutme.htm">About me</a></li>
  <li><a href="hobbies.htm">Hobbies</a></li>
  <li><a href="job.htm">Job</a></li>
  <li><a href="game.htm">Original Game</a></li>
  <li><a href="gameObject.htm">OOP Game</a></li>
  <li><a href="settings.htm">Settings</a></li>
</ul>
</nav>

<section>
  <!-- 
  create the canvas object
  キャンバスオブジェクトの生成
  -->
  <div style="text-align: center; margin: 20px auto;">
    <div class="canvas-container" style="position: relative; display: inline-block;">
      <canvas id="MyCanvas" width="480" height="320"></canvas>
      <!-- Mute button positioned relative to canvas -->
      <button id="muteButton" class="mute-button" onclick="toggleMute()" style="position: absolute; top: 10px; right: 10px; z-index: 1000; background: rgba(0, 0, 0, 0.2); color: white; border: none; border-radius: 50%; width: 45px; height: 45px; font-size: 18px; cursor: pointer; display: flex; align-items: center; justify-content: center; opacity: 0.5;">🔊</button>
    </div>
  </div>
  
  <!-- Add a button to start the game - centered below canvas -->
  <div style="text-align: center; margin-top: 20px;">
    <button id="runButton" style="font-size: 24px; padding: 15px 30px; background: #4CAF50; color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.2); transition: all 0.3s ease;">Start Game</button>
  </div>

  <!-- Add the audio element for the BGM -->
  <audio id="bgm" src="assets/bgm.mp3" loop></audio>

  <script src="player.js"></script>
  <script src="Sakura.js"></script>
  <script>
    // =================================================================
    // 1. CONFIGURATION & GAME STATE
    // =================================================================

    // Canvas and DOM Elements
    const canvas = document.getElementById("MyCanvas");
    const ctx = canvas.getContext("2d");
    
    // Ball Properties
    let x = canvas.width / 2;
    let y = canvas.height - 30;
    let dx = 2;
    let dy = -2;
    const radius = 10;

    // Paddle Properties
    const paddleHeight = 10;
    const paddleWidth = 75;
    let paddleX = (canvas.width - paddleWidth) / 2;

    // Second paddle Properties
    const paddleHeight2 = 10;
    const paddleWidth2 = 75;
    let paddleX2 = (canvas.width - paddleWidth2) / 2;

    // Brick Properties
    const brickRowCount = 3;
    const brickColumnCount = 5;
    const brickWidth = 75;
    const brickHeight = 20;
    const brickPadding = 10;
    const brickOffsetTop = 30;
    const brickOffsetLeft = 30;
    const brickColor = {
      0: "#0095DD",
      1: "#DD9500",
      2: "#95DD00",
      3: "#DD0095",
      4: "#00DD95"
    };

    // Game State
    let score = 0;
    let lives = 3;
    let rightPressed = false;
    let leftPressed = false;
    var interval; // This will hold the game loop interval

    // Brick Array Initialization
    const bricks = [];
    for (let c = 0; c < brickColumnCount; c++) {
      bricks[c] = [];
      for (let r = 0; r < brickRowCount; r++) {
        bricks[c][r] = { x: 0, y: 0, status: 1 };
      }
    }
    const brickCount = brickRowCount * brickColumnCount;

    // =================================================================
    // 2. AUDIO HANDLING
    // =================================================================
    
    // Sound Object Definition
    function sound(src) {
      this.sound = document.createElement("audio");
      this.sound.src = src;
      this.sound.setAttribute("preload", "auto");
      this.sound.setAttribute("controls", "none");
      this.sound.style.display = "none";
      document.body.appendChild(this.sound);
      this.play = function(){ this.sound.play(); }
      this.stop = function(){ this.sound.pause(); }
    }

    // Sound Effects
    const bounceSound = new sound("assets/bounce.mp3");
    const blockSound = new sound("assets/blockSound.mp3");
    const gameOverSound = new sound("assets/gameOver.mp3");
    const winSound = new sound("assets/winSound.mp3");

    // Debug: Check if mute button exists
    console.log('Checking for mute button...');
    const muteButtonCheck = document.getElementById('muteButton');
    console.log('Mute button found:', muteButtonCheck);

    // Mute functionality
    let isMuted = false;
    const allSounds = [bounceSound, blockSound, gameOverSound, winSound];

    function toggleMute() {
      console.log('Mute button clicked!');
      isMuted = !isMuted;
      const muteButton = document.getElementById('muteButton');
      const bgm = document.getElementById('bgm');
      console.log('Mute button element:', muteButton);
      console.log('BGM element:', bgm);
      
      if (isMuted) {
        // Mute all sounds
        bgm.muted = true;
        allSounds.forEach(sound => {
          sound.sound.muted = true;
        });
        muteButton.textContent = '🔇';
        muteButton.classList.add('muted');
      } else {
        // Unmute all sounds
        bgm.muted = false;
        allSounds.forEach(sound => {
          sound.sound.muted = false;
        });
        muteButton.textContent = '🔊';
        muteButton.classList.remove('muted');
      }
    }


    
    // Initialize game after everything is loaded
    function initializeGame() {
      console.log('Initializing game...');
      try {
        loadCustomSettings();
        console.log('Custom settings loaded successfully');
      } catch (error) {
        console.error('Error loading custom settings:', error);
      }
    }

    // =================================================================
    // 3. DRAWING FUNCTIONS
    // =================================================================

    function drawPaddle() {
      ctx.beginPath();
      ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
      
      // Use custom paddle color if available
      const customPaddleColor = localStorage.getItem('gamePaddleColor');
      ctx.fillStyle = customPaddleColor || "#0095DD";
      
      ctx.fill(); 
      ctx.closePath();
    }

    function drawBricks() { 
      for (let c = 0; c < brickColumnCount; c++) {
        for (let r = 0; r < brickRowCount; r++) {
          if (bricks[c][r].status == 1) {
            const bx = c * (brickWidth + brickPadding) + brickOffsetLeft;
            const by = r * (brickHeight + brickPadding) + brickOffsetTop;
            bricks[c][r].x = bx;
            bricks[c][r].y = by;
            ctx.beginPath();
            ctx.rect(bx, by, brickWidth, brickHeight);
            ctx.fillStyle = brickColor[c];
            ctx.fill();
            ctx.closePath();
          } 
        }
      }
    }

    function drawScore() {
      ctx.font = "16px Arial";
      ctx.fillStyle = "#0095DD";
      ctx.fillText("Score: " + score, 8, 20);
    }

    function drawLives() {
      ctx.font = "16px Arial";
      ctx.fillStyle = "#0095DD";
      ctx.fillText("Lives: " + lives, canvas.width - 65, 20);
    }

    // =================================================================
    // 4. INPUT HANDLING
    // =================================================================

    document.addEventListener("keydown", keyDownHandler, false);
    document.addEventListener("keyup", keyUpHandler, false);
    document.addEventListener("mousemove", mouseMoveHandler, false);

    function keyDownHandler(e) {
      if (e.key == "Right" || e.key == "ArrowRight") {
        rightPressed = true;
      } else if (e.key == "Left" || e.key == "ArrowLeft") {
        leftPressed = true;
      }
    }

    function keyUpHandler(e) {
      if (e.key == "Right" || e.key == "ArrowRight") {
        rightPressed = false;
      } else if (e.key == "Left" || e.key == "ArrowLeft") {
        leftPressed = false;
      }
    }

    function mouseMoveHandler(e) {
      const relativeX = e.clientX - canvas.offsetLeft;
      if (relativeX > 0 && relativeX < canvas.width) {
        paddleX = relativeX - paddleWidth / 2;
      }
    }

    // =================================================================
    // 5. GAME LOGIC
    // =================================================================

    function collisionDetection() {
      for (let c = 0; c < brickColumnCount; c++) {
        for (let r = 0; r < brickRowCount; r++) {
          const b = bricks[c][r];
          if (b.status == 1) {
            if (x > b.x && x < b.x + brickWidth && y > b.y && y < b.y + brickHeight) {
              dy = -dy;
              blockSound.play();
              b.status = 0;
              score++;
              if (score == brickCount) {
                const bgm = document.getElementById("bgm");
                bgm.pause();
                bgm.currentTime = 0;
                winSound.play();
                alert("Congratulations! You win!");
                document.location.reload();
              }
            }
          }
        }
      }
    }

    function clearCanvas() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    // Load custom settings
    function loadCustomSettings() {
      // Load custom brick colors
      const savedColors = localStorage.getItem('gameBrickColors');
      if (savedColors) {
        try {
          const customColors = JSON.parse(savedColors);
          Object.assign(brickColor, customColors);
        } catch (error) {
          console.error('Error loading brick colors:', error);
        }
      }

      // Load custom paddle color
      const savedPaddleColor = localStorage.getItem('gamePaddleColor');
      if (savedPaddleColor) {
        console.log('Loading custom paddle color:', savedPaddleColor);
      }

      // Load custom background video
      const customVideo = localStorage.getItem('gameBackgroundVideo');
      if (customVideo) {
        setupCustomVideo(customVideo);
      }

      // Load custom audio
      loadCustomAudio();
    }

    function setupCustomVideo(videoData) {
      // Create video element from base64 data
      const videoElement = document.createElement('video');
      videoElement.src = videoData;
      videoElement.loop = true;
      videoElement.muted = true;
      videoElement.playsInline = true;
      videoElement.style.display = 'none';
      document.body.appendChild(videoElement);
      
      // Replace the global video variable
      window.customVideoElement = videoElement;
    }

    function loadCustomAudio() {
      const audioTypes = ['bgm', 'bounce', 'block', 'gameOver', 'win'];
      audioTypes.forEach(type => {
        const customAudio = localStorage.getItem(`gameAudio_${type}`);
        if (customAudio) {
          if (type === 'bgm') {
            const bgmElement = document.getElementById('bgm');
            if (bgmElement) {
              bgmElement.src = customAudio;
            }
          } else {
            // Update sound effects
            const soundMap = {
              bounce: bounceSound,
              block: blockSound,
              gameOver: gameOverSound,
              win: winSound
            };
            
            if (soundMap[type]) {
              soundMap[type].sound.src = customAudio;
            }
          }
        }
      });
    }

    function drawBackground() {
      // Try to draw custom video background first
      if (window.customVideoElement && window.customVideoElement.readyState >= 2) {
        try {
          ctx.drawImage(window.customVideoElement, 0, 0, canvas.width, canvas.height);
          return;
        } catch (error) {
          console.warn('Video drawing error:', error);
        }
      }
      
      // Default gradient background
      const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradient.addColorStop(0, '#1e3c72');
      gradient.addColorStop(1, '#2a5298');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    // =================================================================
    // 6. MAIN GAME LOOP & CONTROL
    // =================================================================

    function draw() {
      // Clear canvas and draw background
      clearCanvas();
      drawBackground();
      
      // Draw game elements
      drawBricks();
      drawPlayer(ctx, x, y, radius);
      drawPaddle();
      drawScore();
      drawLives();
      
      // Handle collisions
      collisionDetection();

      // Wall collision logic
      if (x + dx > canvas.width - radius || x + dx < radius) {
        dx = -dx;
        bounceSound.play();
      }
      if (y + dy < radius) {
        dy = -dy;
        bounceSound.play();
      } else if (y + dy > canvas.height - radius) {
        if (x > paddleX && x < paddleX + paddleWidth) {
          dy = -dy;
          bounceSound.play();
        } else {
          lives--;
          if (!lives) {
            gameOverSound.play();
            const bgm = document.getElementById("bgm");
            bgm.pause();
            bgm.currentTime = 0;
            alert("GAME OVER");
            document.location.reload();
          } else {
            x = canvas.width / 2;
            y = canvas.height - 30;
            dx = 2;
            dy = -2;
            paddleX = (canvas.width - paddleWidth) / 2;
          }
        }
      }

      // Paddle movement logic
      if (rightPressed && paddleX < canvas.width - paddleWidth) {
        paddleX += 7;
      } else if (leftPressed && paddleX > 0) {
        paddleX -= 7;
      }

      // Ball movement
      x += dx;
      y += dy;
    }

    function startGame() {
      interval = setInterval(draw, 10);
      
      // Start custom video if available
      if (window.customVideoElement) {
        window.customVideoElement.play().catch(error => console.warn('Video play error:', error));
      }
      
      const bgm = document.getElementById("bgm");
      bgm.play();
    }

    // Initialize everything when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM loaded, initializing game elements...');
      
      // Check for mute button
      const muteButton = document.getElementById("muteButton");
      if (muteButton) {
        console.log('Mute button found and ready');
      } else {
        console.error('Mute button not found!');
      }
      
      // Set up start button
      const runButton = document.getElementById("runButton");
      if (runButton) {
        runButton.addEventListener("click", function () {
          console.log('Start button clicked');
          try {
            // Initialize game settings first
            initializeGame();
            // Then start the game
            startGame();
            this.disabled = true;
            console.log('Game started successfully');
          } catch (error) {
            console.error('Error starting game:', error);
            alert('Error starting game: ' + error.message);
          }
        });
        console.log('Start button event listener added');
      } else {
        console.error('Start button not found!');
      }
    });
  </script>
</section>

<footer>
<p>&copy; 2023 Yuri Tijerino. All rights reserved.</p>
</footer>

</body>
</html>