<!DOCTYPE html>
<html lang="ja">
<head>
<title>My Game</title>
<meta charset="utf-8">

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js">
</script>
<![endif]-->

<style>
body {font-family: Verdana, sans-serif; font-size:0.8em;}
header, nav, section, article, footer
{border:1px solid grey; margin:5px; padding:8px;}
nav ul {margin:0; padding:0;}
nav ul li {display:inline; margin:5px;}
canvas { background: #eee; display: block; margin: 0 auto; }
</style>


</head>

<body>

<header>
<h1>関学太郎</h1>
</header>

<nav>
<ul>
  <li><a href="aboutme.htm">About me</a></li>
  <li><a href="hobbies.htm">Hobbies</a></li>
  <li><a href="job.htm">Job</a></li>
  <li><a href="game.htm">Game</a></li>
</ul>
</nav>

<section>

  <canvas id="MyCanvas" width="480" height="320"></canvas>

  <script>

    // Define a object class called Player
    // プレヤーオブジェクトクラスを定義する
    class Player {
      // A constructor is a special method that is called when the object is created.
      // コンストラクタはオブジェクトが生成されたときに呼ばれる特別なメソッドです。
      constructor(canvas) {
        this.canvas = canvas;
        this.score = new Score(canvas, 0);
        this._lives = new Lives(canvas, 3);
        this.ctx = canvas.getContext("2d");
        this.x = canvas.width / 2;
        this.y = canvas.height - 30;
        this.dx = Player.PLAYER_SPEED;
        this.dy = -Player.PLAYER_SPEED;
        this.isHappy = true;
        
        this.crashSound = new Audio("mixkit-game-ball-tap-2073.wav");
      }
      // Static properties are just like constants
      // 静的プロパティは定数と同じ
      static get PLAYER_SPEED() { return 1; }
      static get PLAYER_RADIUS() { return 10; }
      static get PLAYER_CIR_START() { return 0; }
      static get EYE_X_OFFSET() { return 3; }
      static get EYE_Y_OFFSET() { return 3; }
      static get EYE_RADIUS() { return 2; }
      static get EYE_START() { return 0; }
      static get MOUTH_RADIUS() { return 3; }
      static get MOUTH_START() { return 0; }
      static get MOUTH_Y_OFFSET() { return 2; }

      // Method to draw the player
      // プレーヤーを描画するメソッド
      drawPlayer() {
        // Draw player
        // プレーヤーを描画する
        this.ctx.beginPath();
        this.ctx.arc(this.x, this.y, Player.PLAYER_RADIUS, Player.PLAYER_CIR_START, 2 * Math.PI);
        this.ctx.fillStyle = "yellow";
        this.ctx.fill();
        this.ctx.strokeStyle = "red";
        this.ctx.stroke();
        this.ctx.closePath();
        
        this.crashSound = new Audio("mixkit-game-ball-tap-2073.wav");

        // Draw left eye
        // 左目を描画する
        this.ctx.beginPath();
        this.ctx.arc(this.x - Player.EYE_X_OFFSET, this.y - Player.EYE_Y_OFFSET, Player.EYE_RADIUS, Player.EYE_START, Math.PI * 2, true);
        this.ctx.fillStyle = "black";
        this.ctx.fill();

        // Draw right eye
        // 右目を描画する
        this.ctx.beginPath();
        this.ctx.arc(this.x + Player.EYE_X_OFFSET, this.y - Player.EYE_Y_OFFSET, Player.EYE_RADIUS, Player.EYE_START, Math.PI * 2, true);
        this.ctx.fillStyle = "black";
        this.ctx.fill();

        // Draw mouth
        // 口を描画する
        if (this.isHappy) {
            this.ctx.beginPath();
            this.ctx.arc(this.x, this.y + Player.MOUTH_Y_OFFSET, Player.MOUTH_RADIUS, Player.MOUTH_START, Math.PI, false);
            this.ctx.strokeStyle = "black";
            this.ctx.stroke();
        }

        this.score.drawScore(); // Use the instantiated Score object here

        // Move the Player by changing its position everytime the drawPlayer() method is called
        // プレーヤーを描画するたびに、プレーヤーの位置を変更する
        this.x += this.dx;
        this.y += this.dy;
      }

      // Method to check if the player has crashed into the walls on the sides and above
      // プレーヤーが左右の壁と上に衝突しているかどうかをチェックするメソッド
      collisionDetection(paddleX) {
        // Check collision with the walls
        // 壁との衝突をチェックする
        if (this.x + Player.PLAYER_RADIUS >= this.canvas.width || this.x - Player.PLAYER_RADIUS <= 0) {
            this.dx = -this.dx;
        }

        // Check collision with the celing
        if (this.y - Player.PLAYER_RADIUS <= 0) {
            this.dy = -this.dy;
            this.crashSound.play();
            //this.isHappy = !this.isHappy;
        } 
        // Check collision with the paddle
        
        else if (this.y + Player.PLAYER_RADIUS >= 
                  this.canvas.height - Paddle.PADDLE_HEIGHT) {
            if (this.x >= paddleX && 
                this.x <= paddleX + Paddle.PADDLE_WIDTH) {
                this.dy = -this.dy;
                this.crashSound.play();
                this.isHappy = !this.isHappy;
            }
        }

    // Check if the player has fallen off the bottom of the screen
    if (this.y + Player.PLAYER_RADIUS > this.canvas.height) {
      this._lives.decreaseLives() // Decrement the player's lives
      // Reset the player's position to the starting position
      this.x = this.canvas.width / 2;
      this.y = this.canvas.height - 30;
      this.dx = Player.PLAYER_SPEED;
      this.dy = -Player.PLAYER_SPEED;
    }

    }


    // Check collision with the bricks
    // ブリックとの衝突をチェックする
    bricksCollisionDetection(bricks) {
      for (let c= 0; c < bricks.length; c++) {
        for (let r= 0; r < bricks[c].length; r++) {
          let brick = bricks[c][r];
          if (brick.status === 1) {
            if (this.x + Player.PLAYER_RADIUS >= brick.x && 
              this.x - Player.PLAYER_RADIUS<= brick.x + brick.width &&
              this.y + Player.PLAYER_RADIUS>= brick.y && 
              this.y - Player.PLAYER_RADIUS <= brick.y + brick.height) {
                this.dy = -this.dy;
                brick.status = 0;
                this.score.updateScoreText();
                this.crashSound.play();
                //this.isHappy = !this.isHappy;
            }
          }
        }
        
      }
    }

}

  class Paddle {
    // A constructor is a special method that is called when the object is created.
    // コンストラクタはオブジェクトが生成されたときに呼ばれる特別なメソッドです。
    constructor(canvas) {
        this.canvas = canvas;
        this.ctx = canvas.getContext("2d");
        this.paddleX = (canvas.width - Paddle.PADDLE_WIDTH) / 2;
        this.paddleWidth = Paddle.PADDLE_WIDTH;
    }
    // Static properties are just like constants
    // 静的プロパティは定数と同じ
    static get PADDLE_HEIGHT() { return 10; }
    static get PADDLE_WIDTH() { return 75; }
    static get PADDLE_SPEED() { return 5; }

    // Method to draw the paddle
    // パドルを描画するメソッド
    //drawPaddle(rightPressed, leftPressed) {
    drawPaddle(rightPressed, leftPressed) {
      this.ctx.beginPath();
      this.ctx.rect(this.paddleX, this.canvas.height - Paddle.PADDLE_HEIGHT, Paddle.PADDLE_WIDTH, Paddle.PADDLE_HEIGHT);
      this.ctx.fillStyle = "blue";
      this.ctx.fill();
      this.ctx.closePath();

      if (rightPressed && this.paddleX < this.canvas.width - Paddle.PADDLE_WIDTH) {
          this.paddleX += Paddle.PADDLE_SPEED;
          //console.log("Right pressed...")
      } else if (leftPressed && this.paddleX > 0) {
          this.paddleX -= Paddle.PADDLE_SPEED;
          //console.log("Left pressed...")
      }
        
    }
}

// Use classes to build the brick field
// クラスを使ってブロックフィールドを構築する

// Use classes to build the brick field
// クラスを使ってブロックフィールドを構築する
class Brick {
  constructor(canvas, x, y, width, height, status) {
    this.canvas = canvas;
    this.ctx = canvas.getContext("2d");
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.status = status;
  //  console.log("Brick Created");
  }
  drawBrick() {
    
    if (this.status === 1) {
      this.ctx.beginPath();
      this.ctx.rect(this.x, this.y, this.width, this.height);
      this.ctx.fillStyle = "blue";
      this.ctx.fill();
      this.ctx.closePath();
    //  console.log("Brick Drawn in drawBrick method if");
    }
    
    //console.log("Brick Drawn out of drawBrick method if");
  }
  

}  

class Score {
  constructor(canvas, initialScore) {
    this.canvas = canvas;
    this.ctx = canvas.getContext("2d");
    this.scoreCount = initialScore; // Initialize scoreCount to 0
    this.scoreText = "Score: " + this.scoreCount; // Initialize scoreText with current score
    this.scoreTextSize = 20;
    this.scoreTextX = 10;
    this.scoreTextY = 20;
  }

  updateScoreText() { // score.updateScoreText
    this.scoreCount++; // Increment score
    this.scoreText = "Score: " + this.scoreCount; // Update scoreText with incremented score
  }

  drawScore() {
    this.ctx.font = this.scoreTextSize + "px Arial";
    this.ctx.fillStyle = "black";
    this.ctx.textAlign = "left";
    this.ctx.fillText(this.scoreText, this.scoreTextX, this.scoreTextY);
    
  }
}

class Lives {
  constructor(canvas, initialLives) {
    this.canvas = canvas;
    this.ctx = canvas.getContext("2d");
    this.lives = initialLives;
    this.livesText = "Lives: " + this.lives;
    this.livesTextSize = 20;
    this.livesTextX = this.canvas.width - 10;
    this.livesTextY = 20;
  }

  decreaseLives() {
    if (this.lives-- > 0)
      this.livesText = "Lives: " + this.lives;
    if (this.lives === 0) {
      this.livesText = "Game Over";
    }
  }

  drawLives() {
    this.ctx.font = this.livesTextSize + "px Arial";
    this.ctx.fillStyle = "black";
    this.ctx.textAlign = "right";
    this.ctx.fillText(this.livesText, this.livesTextX, this.livesTextY);
  }
}
  
// The class that controls the game and is standard to define it for all Javascript-based games
// このクラスがゲームをコントロールする。普段Javascriptのゲームで定義されます。 
class Game {
  constructor(canvasId) {
    this.canvas = document.getElementById(canvasId);
    this.ctx = this.canvas.getContext("2d");
    this.player = new Player(this.canvas);
    this.paddle = new Paddle(this.canvas);
    this.rightPressed = false; 
    this.leftPressed = false;
    this.bricks = [];
    this.initBricks();
    this.bindEventListeners(); // bind the event listeners
    this.gameWon = false;
    this.gameLost = false;
    this.gameRunning = true;
    this.BGMSound = new Audio("Run-Amok(chosic.com).mp3");
    this.BGMSound.loop = true;
    this.lostSound = new Audio("mixkit-player-losing-or-failing-2042.wav")
    //this.BGMSound.play();
  }


  // Method to draw the bricks
  // ブロックを描画するメソッド
  initBricks() {
      const brickRowCount = 3;
      const brickColCount = 5;
      const brickWidth = 75;
      const brickHeight = 20;
      const brickPadding = 10;
      const brickOffsetTop = 30;
      const brickOffsetLeft = 30;

      // Use the local variables brickRowCount and brickColCount instead of this.brickRowCount and this.brickColCount
      for (let c = 0; c < brickColCount; c++) {
          this.bricks[c] = [];
          for (let r = 0; r < brickRowCount; r++) {
              const brickX = (c * (brickWidth + brickPadding)) + brickOffsetLeft;
              const brickY = (r * (brickHeight + brickPadding)) + brickOffsetTop;
              this.bricks[c][r] = new Brick(this.canvas, brickX, brickY, brickWidth, brickHeight, 1);
          }
      }
      
    
  }

  // Method to draw the bricks
  // ブロックを描画するメソッド
  drawBricks() {
   
    for (let c = 0; c < this.bricks.length; c++) {
        for (let r = 0; r < this.bricks[c].length; r++) {
            this.bricks[c][r].drawBrick();
            
        }
    }
    
  }

 
  bindEventListeners() {
    document.addEventListener("keydown", e => this.keyDownHandler(e));
    document.addEventListener("keyup", e => this.keyUpHandler(e));
    //document.addEventListener("mousemove", e => this.mouseMoveHandler(e));
  }

  keyDownHandler(e) {
    if (e.key === "Right" || e.key === "ArrowRight") {
      this.rightPressed = true;
    } else if (e.key === "Left" || e.key === "ArrowLeft") {
      this.leftPressed = true;
    }
  }

  keyUpHandler(e) {
    if (e.key === "Right" || e.key === "ArrowRight") {
      this.rightPressed = false;
    } else if (e.key === "Left" || e.key === "ArrowLeft") {
      this.leftPressed = false;
    }
  }

  mouseMoveHandler(e) {
    //console.log("e.clientX=", e.clientX);
    //console.log("offsetLeft= ",this.canvas.offsetLeft);
    //console.log("paddleX= ",this.paddle.paddleX);
      
    const relativeX = e.clientX - this.canvas.offsetLeft;
    if(relativeX > 0 && relativeX < this.canvas.width){
        this.paddle.paddleX = relativeX - this.paddle.PADDLE_WIDTH/2;
    }
  }


  draw() {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.player.drawPlayer();
    this.paddle.drawPaddle(this.rightPressed, this.leftPressed);
    this.drawBricks();
    this.player._lives.drawLives(); // Draw the lives using the Lives class
    this.player.score.drawScore(); // Use the instantiated Score object here
  }

  // This method checks whether the player has hit any of the bricks and changes the score
  // 
  

  // Draw the score
  // スコアを描画します


  // Reset the game
  resetGame() {
    this.player = new Player(this.canvas);
    this.paddle = new Paddle(this.canvas);
    this.bricks = [];
    this.initBricks();
    this.gameLost = false;
    this.gameRunning = true;
  }


  // This method is called in the main game loop to draw the game
  // メインゲームループでこのメソッドを呼び出します
  run() {
    
    //this.BGMSound.play()
    //console.log("Game Loop Running");
    this.draw();
    this.player.collisionDetection(this.paddle.paddleX);
    this.player.bricksCollisionDetection(this.bricks);

    if  (this.gameRunning) {
      this.draw();
      this.player.collisionDetection(this.paddle.paddleX);
      this.player.bricksCollisionDetection(this.bricks);
      
    }
    
    // Check if the player has lost all lives
    if (this.player._lives.lives === 0 ) {
      this.gameLost = true; // Set the gameLost flag to true
      this.gameRunning = false;
      this.lostSound.play();
      alert("You Lost!!!");
      this.resetGame();
    }

    if (this.player.score.scoreCount === 15 ) {
      this.gameWon = true;
      this.gameRunning = false;
      alert("You Win!!!")
      this.resetGame();
    }
  
    requestAnimationFrame(() => this.run());
  }
} 

// The main game loop is called after the game class is created.  This is where magic happens
// ゲームクラスが作成された後にメインゲームループが呼び出されます。ここで魔法が起き
//game.BGMSound.play();
const game = new Game("MyCanvas");

//game.run();

</script>

<div class="text-center">
  <button onclick="game.run()">Start</button>
</div>


</section>

<footer>
<p>&copy; 2024 Yuri Tijerino. All rights reserved.</p>
</footer>

</body>
</html>
